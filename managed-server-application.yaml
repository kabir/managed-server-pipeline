apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: managed-server-application
spec:
  workspaces:
    - name: maven-workspace
    - name: provisioned-server-workspace
  params:
    - name: git-url
    - name: git-revision
      default: ""
    - name: context-dir
      default: ""
    - name: server-feature-pack-ga
      type: string
      default: ""
    - name: server-feature-pack-version
      type: string
      default: ""
    - name: cloud-feature-pack-ga
      type: string
      default: ""
    - name: cloud-feature-pack-version
      type: string
      default: ""
    - name: datasources-feature-pack-ga
      type: string
      default: ""
    - name: datasources-feature-pack-version
      type: string
      default: ""
    - name: dockerRegistry
      default: "image-registry.openshift-image-registry.svc:5000"
    - name: namespace
      default: "$(context.pipelineRun.namespace)"
    - name: deploymentName

  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: maven-workspace
      params:
        - name: url
          value: $(params.git-url)
#        - name: subdirectory
#          value: "source"
        - name: deleteExisting
          value: "true"
        - name: revision
          value: $(params.git-revision)

    - name: maven-build
      taskRef:
        name: maven
        kind: ClusterTask
      runAfter:
        - fetch-repository
      params:
        - name: CONTEXT_DIR
          value: $(params.context-dir)
        - name: GOALS
          value:
            - -B
            - -DskipTests
            - -Dmaven.source.skip
            - clean
            - package
      workspaces:
        - name: source
          workspace: maven-workspace
        - name: maven-settings
          workspace: maven-workspace
    # Debug contents of workspace directory
    - name: temp-check-directory
      runAfter:
        - maven-build
      params:
        - name: context-dir
          value: $(params.context-dir)
      workspaces:
        - name: deployment
          workspace: maven-workspace
      taskSpec:
        params:
          - name: context-dir
        workspaces:
          - name: deployment
            description: The workspace to create the readme file in
        steps:
          - name: check-directory
            env:
              - name: WORKSPACE_DEPLOYMENT_PATH
                value: $(workspaces.deployment.path)
              - name: WORKSPACE_DEPLOYMENT_CONTEXT_DIR
                value: $(params.context-dir)
            image: ubuntu
            script: |
              echo "${WORKSPACE_DEPLOYMENT_PATH} contents"
              ls "${WORKSPACE_DEPLOYMENT_PATH}"
              echo "${WORKSPACE_DEPLOYMENT_PATH}/${WORKSPACE_DEPLOYMENT_CONTEXT_DIR} contents"
              ls "${WORKSPACE_DEPLOYMENT_PATH}/${WORKSPACE_DEPLOYMENT_CONTEXT_DIR}"
    # Debug - END
    - name: provision-server
      runAfter:
        - maven-build
      params:
        - name: context-dir
          value: $(params.context-dir)
        - name: server-feature-pack-ga
          value: $(params.server-feature-pack-ga)
        - name: server-feature-pack-version
          value: $(params.server-feature-pack-version)
        - name: cloud-feature-pack-ga
          value: $(params.cloud-feature-pack-ga)
        - name: cloud-feature-pack-version
          value: $(params.cloud-feature-pack-version)
        - name: datasources-feature-pack-ga
          value: $(params.datasources-feature-pack-ga)
        - name: datasources-feature-pack-version
          value: $(params.datasources-feature-pack-version)
      workspaces:
        - name: deployment
          workspace: maven-workspace
        - name: provisioned-server-workspace
          workspace: provisioned-server-workspace
      taskSpec:
        params:
          - name: context-dir
            type: string
            default: ""
          - name: server-feature-pack-ga
            type: string
            default: ""
          - name: server-feature-pack-version
            type: string
            default: ""
          - name: cloud-feature-pack-ga
            type: string
            default: ""
          - name: cloud-feature-pack-version
            type: string
            default: ""
          - name: datasources-feature-pack-ga
            type: string
            default: ""
          - name: datasources-feature-pack-version
            type: string
            default: ""
        results:
          - name: dockerFile
            description: The generated docker file path.
          - name: dockerBuildContext
            description: The path of the build context.
        workspaces:
          - name: deployment
            description: The workspace containing the applicaton
          - name: provisioned-server-workspace
            description: The workspace to hold the provisioned server
        steps:
          - name: provision-server
            env:
              - name: MANAGED_SERVER_SERVER_FEATURE_PACK_GA
                value: $(params.server-feature-pack-ga)
              - name: MANAGED_SERVER_SERVER_FEATURE_PACK_VERSION
                value: $(params.server-feature-pack-version)
              - name: MANAGED_SERVER_CLOUD_FEATURE_PACK_GA
                value: $(params.cloud-feature-pack-ga)
              - name: MANAGED_SERVER_CLOUD_FEATURE_PACK_VERSION
                value: $(params.cloud-feature-pack-version)
              - name: MANAGED_SERVER_DATASOURCES_FEATURE_PACK_GA
                value: $(params.datasources-feature-pack-ga)
              - name: MANAGED_SERVER_DATASOURCES_FEATURE_PACK_VERSION
                value: $(params.datasources-feature-pack-version)
              # BASE_IMAGE_LAYERS is set when preparing the base builder image. We need to unset it here
              # to perform a normal build. Noop for the empty builder image.
              - name: BASE_IMAGE_LAYERS
                value:
              - name: WORKSPACE_DEPLOYMENT_PATH
                value: $(workspaces.deployment.path)
              - name: PROVISIONED_SERVER_PATH
                value: $(workspaces.provisioned-server-workspace.path)
              - name: WORKSPACE_DEPLOYMENT_CONTEXT_DIR
                value: $(params.context-dir)
            image: quay.io/kabirk/wildfly-managed-server-jdk17:latest
            script: |
              #!/usr/bin/env sh
              set -eu

              # Copy the war where it is expected by the image
              # TODO the extracted server-config.xml. server-init.yml and server-init.cli files
              #echo "S2I_SOURCE_DIR ${S2I_SOURCE_DIR}"
              srcDir="${WORKSPACE_DEPLOYMENT_PATH}"
              if [ -n "${WORKSPACE_DEPLOYMENT_CONTEXT_DIR}" ]; then
                  srcDir="${srcDir}/${WORKSPACE_DEPLOYMENT_CONTEXT_DIR}"
              fi
              srcDir="${srcDir}/target"
              echo "Found dir: ${srcDir}"
              ls -al "${srcDir}"
              echo "Looking for ${srcDir}/ROOT.war"
              ls "${srcDir}/ROOT.war"
              
              export S2I_SOURCE_DIR=/tmp/src
              mkdir -p "${S2I_SOURCE_DIR}"

              # TODO Wildcards don't work....  Figure it out or make user specify name            
              #echo "Looking for ${srcDir}/*.war"
              #ls "${srcDir}/*.war"
              #cp "${srcDir}/*.war" "${S2I_SOURCE_DIR}"
              # Hardcode the name of the archive for now
              cp "${srcDir}/ROOT.war" "${S2I_SOURCE_DIR}"
              
                                
              # Invoke the image entry point
              /usr/local/s2i/assemble

              # copy out the server
              # mv -rf "${JBOSS_HOME}" "${PROVISIONED_SERVER_PATH}"


              # Generate Dockerfile file and create docker build context
              # To be consumed by task that does docker build (kaniko, buildah,...)
              dockerDirName="docker-build"
              dockerFileName="Dockerfile"
              dockerBuildContext="${PROVISIONED_SERVER_PATH}/$dockerDirName"
              dockerFile="$dockerBuildContext/$dockerFileName"
              mkdir -p "$dockerBuildContext"
              cp -rf "$JBOSS_HOME" "$dockerBuildContext"
              cat <<EOF > "$dockerFile"
              FROM quay.io/wildfly/wildfly-runtime:latest
              COPY server \$JBOSS_HOME
              USER root
              RUN chown -R jboss:root \$JBOSS_HOME && chmod -R ug+rwX \$JBOSS_HOME
              USER jboss
              EOF
              
              # The paths are relative to the provisioned-server-workspace.
              echo -n "$dockerDirName/$dockerFileName" > $(results.dockerFile.path)
              echo -n "$dockerDirName" > $(results.dockerBuildContext.path)
    
              # Put the deployment into the server for now
              cp "${srcDir}/ROOT.war" "${dockerBuildContext}/server/standalone/deployments/"
              
              ls -al "$dockerBuildContext"

    - name: buildah-build
      runAfter:
        - provision-server
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: "$(params.dockerRegistry)/$(params.namespace)/$(params.deploymentName)"
        - name: DOCKERFILE
          value: "$(tasks.provision-server.results.dockerFile)"
        - name: CONTEXT
          value: "$(tasks.provision-server.results.dockerBuildContext)"
        - name: TLSVERIFY
          value: "false"
      workspaces:
        - name: source
          workspace: provisioned-server-workspace


    - name: deploy
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - buildah-build
#      when:
#        - input: "$(params.deploy)"
#          operator: in
#          values: ["true"]
      params:
        - name: SCRIPT
          value: |
            oc new-app --docker-image $(params.dockerRegistry)/$(params.namespace)/$(params.deploymentName) || true
            oc expose service/$(params.deploymentName) || true


